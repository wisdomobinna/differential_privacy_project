{"ast":null,"code":"/**\n * API service for communicating with the heavy hitters algorithm backend\n */\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n/**\n * Run the heavy hitters algorithm with specified parameters\n * @param {Object} params - Algorithm parameters\n * @returns {Promise} - Promise resolving to algorithm results\n */\nexport const runAlgorithm = async params => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/run-algorithm`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(params)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `API returned status ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error running algorithm:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch data about privacy parameter impact on algorithm performance\n * @returns {Promise} - Promise resolving to privacy impact data\n */\nexport const fetchPrivacyImpact = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/privacy-impact`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `API returned status ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching privacy impact data:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch data about distribution impact on algorithm performance\n * @returns {Promise} - Promise resolving to distribution impact data\n */\nexport const fetchDistributionImpact = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/distribution-impact`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `API returned status ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching distribution impact data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","runAlgorithm","params","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","error","status","console","fetchPrivacyImpact","fetchDistributionImpact"],"sources":["/Users/kcwis/Sites/heavy-hitters/frontend/src/services/api.js"],"sourcesContent":["/**\n * API service for communicating with the heavy hitters algorithm backend\n */\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n/**\n * Run the heavy hitters algorithm with specified parameters\n * @param {Object} params - Algorithm parameters\n * @returns {Promise} - Promise resolving to algorithm results\n */\nexport const runAlgorithm = async (params) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/run-algorithm`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(params),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `API returned status ${response.status}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error running algorithm:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch data about privacy parameter impact on algorithm performance\n * @returns {Promise} - Promise resolving to privacy impact data\n */\nexport const fetchPrivacyImpact = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/privacy-impact`);\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `API returned status ${response.status}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching privacy impact data:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch data about distribution impact on algorithm performance\n * @returns {Promise} - Promise resolving to distribution impact data\n */\nexport const fetchDistributionImpact = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/distribution-impact`);\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `API returned status ${response.status}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching distribution impact data:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,MAAM,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,gBAAgB,EAAE;MAC5DK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,MAAM;IAC7B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,uBAAuBX,QAAQ,CAACY,MAAM,EAAE,CAAC;IAC9E;IAEA,OAAO,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,iBAAiB,CAAC;IAE9D,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,uBAAuBX,QAAQ,CAACY,MAAM,EAAE,CAAC;IAC9E;IAEA,OAAO,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EACjD,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,sBAAsB,CAAC;IAEnE,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,uBAAuBX,QAAQ,CAACY,MAAM,EAAE,CAAC;IAC9E;IAEA,OAAO,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}